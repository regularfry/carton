#!/usr/bin/env ruby
# encoding: utf-8

# Usage:
#   $ carton build outputfile appfile [glob]+
#       Package the files in @glob@, plus any gems
#       listed in the @Gemfile@, into the static
#       executable named @outputfile@. The ruby
#       used will be the current rvm ruby. Running
#       the executable will be equivalent to running
#       @appfile@.
# 


require 'optparse'
require 'carton'


def usage(opts)
  puts opts
  puts
  puts <<-INFO
Carton will build the the ruby currently selected in RVM under BUILDPATH,
combine it with EXECUTABLE and any other --link files to produce EXECUTABLE,
a single file, staticly linked executable.
  INFO
  exit
end

def parse_opts(args)
  options = {:build_path => "build",
    :load_path => "lib",
    :globs => ["lib/**/*.rb", ""]
  }
  opts = OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"

    opts.separator ""
    opts.separator "Specific options:"

    opts.on("-b", "--build_path BUILDPATH",
            "Required: the directory in which to build the application") do |opt|
      options[:build_path] = opt
    end
    
    opts.on("-o", "--output EXECUTABLE",
            "Required: The single-file executable to build") do |opt|
      options[:output] = opt
    end

    opts.on("-i", "--input TOPLEVEL",
            "Required: The entry point ruby file for the application") do |opt|
      options[:appfile] = opt
    end

    opts.on("-l", "--link x,y,z",
            Array, "List of file globs to include") do |opt|
      options[:globs] = opt
    end

    opts.on("-L", "--load_path LOAD_PATH",
            "Load path") do |opt|
      options[:load_path] = opt
    end

    opts.on("-t", "--task CARTON_TASK",
            "Internal task to run") do |opt|
      options[:carton_task] = opt
    end

    opts.on_tail("-h", "--help", "Show this message") do |opt|
      usage(opts)
    end

    opts.on_tail("-v", "--version", "Show the version") do |opt|
      puts Carton::VERSION
      exit
    end

  end
  opts.parse!(args)  

  unless options[:build_path] && options[:output] && options[:appfile]
    usage(opts)
  end

  return options
end


options = parse_opts(ARGV)


Carton::App.new.run(options[:build_path], 
                    options[:output], 
                    options[:appfile],
                    options[:globs],
                    options[:load_path],
                    options[:carton_task])

